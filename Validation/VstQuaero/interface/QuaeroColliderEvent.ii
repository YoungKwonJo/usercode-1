
#include "Quaero/QuaeroColliderEvent.hh"
#include "Quaero/Math.hh"
#include "Quaero/RCPParameters.hh"
#include <algorithm>
using namespace std;

// Constructors

template<class T>
QuaeroColliderEvent<T>::QuaeroColliderEvent(string _eventType, string _runNumber, double _wt, const std::vector<T>& _objects, double _rootS, double _zVtx, string _fullString): QuaeroItem<T>(_eventType, _runNumber, _wt, _objects)
{
  rootS = _rootS;
  zVtx = _zVtx;
  fullString = _fullString;

  double Emin;
      if(hadronMachine())
	Emin = TevatronParameters::smallestObjectPt;
      if(leptonMachine())
	Emin = LEPParameters::smallestObjectEnergy;
  for(int i=0; i<components.size(); i++)
    if((hadronMachine()&&(components[i].getFourVector().perp()<Emin-0.01)) ||
       (leptonMachine()&&(components[i].getFourVector().e()<Emin-0.01)) ||
       (components[i].getObjectType()=="uncl"))
      { components.erase(components.begin()+i); i--; }    

   // standard quaero object order
  for(int i=0; i<components.size(); i++)
    for(int j=i+1; j<components.size(); j++)
      if(components[i].getFourVector().perp() < components[j].getFourVector().perp())
	  {
	    T tmp = components[i];
	    components[i] = components[j];
	    components[j] = tmp;
	  }
  mergeObjectsOfThisType("uncl");
  return;
}


// Accessors

template<class T>
T* QuaeroColliderEvent<T>::getThisObject(std::string objectType, int orderNumber)
{
  return(getThisComponent(objectType,orderNumber));
}

template<class T>
const T* QuaeroColliderEvent<T>::getThisObject(std::string objectType, int orderNumber) const
{
  return(getThisComponent(objectType,orderNumber));
}


template<class T>
std::vector<T> QuaeroColliderEvent<T>::getObjects() const
{
  return(getComponents());
}

template<class T>
int QuaeroColliderEvent<T>::numberOfObjects(double Emin, double maxAbsEtaTheta) const
{
  if(Emin<0)
    {
      if(hadronMachine())
	Emin = TevatronParameters::smallestObjectPt;
      else
	Emin = LEPParameters::smallestObjectEnergy;
    }
  if(maxAbsEtaTheta<0)
    {
      if(hadronMachine())
	maxAbsEtaTheta = 5; // units are pseudorapidity
      if(leptonMachine())
	maxAbsEtaTheta = 1; // units are cos(theta)
    }
  int ans = 0;
  for(int i=0; i<components.size(); i++)
    if(
       (
	leptonMachine() &&
	(components[i].getFourVector().e() > Emin) &&
	(fabs(components[i].getFourVector().cosTheta()) < maxAbsEtaTheta)
	) ||
       (
	hadronMachine() &&
	(components[i].getFourVector().perp() > Emin) &&
	(fabs(Math::theta2eta(components[i].getFourVector().theta())) < maxAbsEtaTheta)	  
	) ||
       ((components[i].getObjectType()=="w")||(components[i].getObjectType()=="z")))
      ans++;
  return(ans);
}


template<class T>
int QuaeroColliderEvent<T>::numberOfObjects(string objectType, double Emin, double maxAbsEtaTheta) const
{
  if(objectType=="e")
    return(numberOfObjects("e+",Emin,maxAbsEtaTheta)+numberOfObjects("e-",Emin,maxAbsEtaTheta));
  if(objectType=="mu")
    return(numberOfObjects("mu+",Emin,maxAbsEtaTheta)+numberOfObjects("mu-",Emin,maxAbsEtaTheta));
  if(objectType=="tau")
    return(numberOfObjects("tau+",Emin,maxAbsEtaTheta)+numberOfObjects("tau-",Emin,maxAbsEtaTheta));

  if(Emin<0)
    {
      if(hadronMachine())
	Emin = TevatronParameters::smallestObjectPt;
      if(leptonMachine())
	Emin = LEPParameters::smallestObjectEnergy;
    }	
  if(maxAbsEtaTheta<0)
    {
      if(hadronMachine())
	maxAbsEtaTheta = 5; // units are pseudorapidity
      if(leptonMachine())
	maxAbsEtaTheta = 1; // units are cos(theta)
    }

  if(objectType=="pmiss")
    {
      if((leptonMachine()&&(getPmiss().e() > Emin)) ||
	 (hadronMachine()&&(getPmiss().perp() > Emin)))	
	return(1);
      else
	return(0);      
    }
  int ans = 0;
  for(int i=0; i<components.size(); i++)
    if(components[i].getObjectType()==objectType)
      {
	if(
	   (
	    leptonMachine() &&
	    (components[i].getFourVector().e() > Emin) &&
	    (fabs(components[i].getFourVector().cosTheta()) < maxAbsEtaTheta)
	    ) ||
	   (
	    hadronMachine() && 
	    (components[i].getFourVector().perp() > Emin) &&
	    (fabs(Math::theta2eta(components[i].getFourVector().theta())) < maxAbsEtaTheta)	  
	    ) ||
	   ((objectType=="w")||(objectType=="z")))
	  ans++;
      }
  return(ans);
}

template<class T>
std::string QuaeroColliderEvent<T>::getEventType() const
{
  return(getItemType());
}


template<class T>
double QuaeroColliderEvent<T>::getRootS() const
{
  return(rootS);
}

template<class T>
double QuaeroColliderEvent<T>::getZVtx() const
{
  return(zVtx);
}

template<class T>
string QuaeroColliderEvent<T>::getRunNumber() const
{
  return(getIdentifier());
}

template<class T>
bool QuaeroColliderEvent<T>::hadronMachine() const
{
  bool ans = (rootS > 1000);
  return(ans);
}

template<class T>
bool QuaeroColliderEvent<T>::leptonMachine() const
{
  bool ans = (rootS <= 1000); // won't have a 1 TeV lepton collider anytime soon
  return(ans);
}

template<class T>
void QuaeroColliderEvent<T>::reVertex(double _zVtx)
{
  zVtx = _zVtx;
  return;
}

template<class T>
HepLorentzVector QuaeroColliderEvent<T>::getPmiss() const
{
  HepLorentzVector pmiss = HepLorentzVector(rootS, Hep3Vector());
  for(int i=0; i<components.size(); i++)
    pmiss -= components[i].getFourVector();
  if(hadronMachine())
    pmiss = HepLorentzVector(Math::addInQuadrature(pmiss.px(),pmiss.py()),Hep3Vector(pmiss.px(),pmiss.py(),0.));
  return(pmiss);
}

template<class T>
istream &operator>>(istream& fin, QuaeroColliderEvent<T> & event)
{
  string eventType = "";
  if(!(fin >> eventType))
    return(fin);
  string runNumber = "0";
  fin >> runNumber;
  string wtString;
  fin >> wtString;
  double wt = parseSystematicallyAffectedNumber(wtString);
  double rootS, zVtx=0;
  fin >> rootS;
  if(rootS>1000) // hadron collider, large bunch length
    fin >> zVtx;

  T object;
  vector<T> objects;
  if(rootS>1000)
    while(object.read(fin,"(m)-pt-eta-phi(deg)"))
      objects.push_back(object);
  else
    while(object.read(fin,"(m)-e-costheta-phi(rad)"))
      objects.push_back(object);

  event = QuaeroColliderEvent<T>(eventType,runNumber,wt,objects,rootS,zVtx);
  return(fin);
}

template<class T>
string QuaeroColliderEvent<T>::print() const
{
  string ans = itemType+"  ";
  ans += identifier+"  ";
  ans += Math::ftoa(wt)+"  "+Math::ftoa(rootS)+"  ";
  if(hadronMachine())
    ans += Math::ftoa(zVtx)+"  ";
  std::vector<T> _objects = getObjects();
  sort(_objects.begin(), _objects.end()); 
  for(int i=0; i<_objects.size(); i++)
    {
      if(leptonMachine())
	ans = ans + _objects[i].print("(m)-e-costheta-phi(rad)");
      if(hadronMachine())
	ans = ans + _objects[i].print("(m)-pt-eta-phi(deg)");
    }
  ans = ans + " ; ";
  return(ans);
}

template<class T>
ostream &operator<<(ostream& fout, const QuaeroColliderEvent<T> & event)
{
  fout << event.print();
  return(fout);
}

template<class T>
bool QuaeroColliderEvent<T>::operator==(const QuaeroColliderEvent<T> & rhs) const
{
  bool ans =
    (rootS == rhs.rootS) &&
    (zVtx == rhs.zVtx) &&
    (fullString == rhs.fullString) &&
    ((QuaeroItem<T>)(*this)==(QuaeroItem<T>)(rhs));
  return(ans);
}

template<class T>
bool QuaeroColliderEvent<T>::approximatelyEqualTo(const QuaeroColliderEvent<T>& rhs, double tol)
{
  bool ans = true;
  vector<string> objectList;
  objectList.push_back("e+");
  objectList.push_back("e-");
  objectList.push_back("mu+");
  objectList.push_back("mu-");
  objectList.push_back("ph");
  objectList.push_back("j");
 
  string theProblem = "";
  for(int i=0; i<objectList.size(); i++)
    {
      int n1 = numberOfObjects(objectList[i]);
      int n2 = rhs.numberOfObjects(objectList[i]);
      if(n1==n2)
	{
	  for(int j=1; j<=n1; j++)
	    {
	      bool sameObject = (getThisObject(objectList[i],j)->approximatelyEqualTo(*(rhs.getThisObject(objectList[i],j)),tol));
	      if(!sameObject)
		{
		  ans = false;
		  theProblem += objectList[i]+Math::ftoa(j)+" ";
		}
	    }
	}
      else
	{
	  ans = false;
	  theProblem += objectList[i]+Math::ftoa(n1)+"-"+Math::ftoa(n2)+" ";
	}
    }
  if(ans==false)
    {
      cout << " ** " << theProblem << endl;
    }
  return(ans);
}


template<class T>
void QuaeroColliderEvent<T>::mergeObjectsOfThisType(std::string objectType)
{
  HepLorentzVector v = HepLorentzVector();
  for(int i=0; i<components.size(); i++)
    if(components[i].getObjectType()==objectType)
      {
	v += components[i].getFourVector();
	components.erase(components.begin()+i);
	i--;
      }
  if(v!=HepLorentzVector())
    components.push_back(T(objectType,v));
  return;
}

